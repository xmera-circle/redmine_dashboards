<%
# frozen_string_literal: true

# This file is part of the Plugin Redmine Dashboards.
#
# Copyright (C) 2016 - 2021 Alexander Meindl <https://github.com/alexandermeindl>, alphanodes.
# See <https://github.com/AlphaNodes/additionals>.
#
# Copyright (C) 2021-2023 Liane Hampe <liaham@xmera.de>, xmera Solutions GmbH.
#
# This plugin program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
%>

<% dashboard_async_cache(dashboard, block_id, async, settings) do %>

  <% query = klass.visible.find_by id: settings[:query_id] %>
  <% if query %>
    <% 
      query.project = @project if query_block[:with_project]
      count = query.send query_block[:count_method]
      query.column_names = settings[:columns].split(',').map(&:to_sym) if settings[:columns].present?
      query.sort_criteria = params[:sort] if params[:sort].present?
    %>
    <%= tag.h3 class: 'query-list-block' do %>
      <%= show(query).dashboard_query_list_block_title(query_block, @project) %>
      <%= " (#{count})" %>
      <%= show(query).dashboard_query_list_block_alerts(dashboard, block_object) %>
    <% end %>
    <% if query.respond_to?(:description) && query.description.present? %>
      <%=tag.div class: 'query-description' do %>
        <%= textilizable query, :description %>
      <% end %>
    <% end %>
    <% if count.positive? %>
      <% 
        # required by some helpers of other plugins 
      %>
      <% @query = query %>

      <%= render(partial: query_block[:list_partial],
                 locals: { query_block[:entities_var] => query.send(query_block[:entries_method],
                                                                    limit: settings.fetch(:max_entries, block_object.default_max_entries)),
                           query: query,
                           query_options: { sort_param: 'sort',
                                            sort_link_options: { method: :post, remote: true } } }) %>
    <% else %>
      <%= render partial: 'dashboards/blocks/nodata', locals: { label: nil } %>
    <% end %>
  <% else %>
    <%= render partial: 'dashboards/blocks/nodata', locals: { label: nil } %>
  <% end %>
<% end %>
